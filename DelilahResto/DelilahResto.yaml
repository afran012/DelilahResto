swagger: "2.0"
info:
  description: "this document contains the parameters to use the Delilah Restó API "
  version: "1.0.0"
  title: "Delilah Restó"
  termsOfService: "http://delilahres.com/tyc/"
  contact:
    email: "apisolutions@delilahres.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost"
basePath: "/v1"
tags:
- name: "product"
  description: "Contains the operations of the products"
  externalDocs:
    description: "Find out more"
    url: "http://delilahres.com/"
- name: "order"
  description: "Contains the operations of the orders"
  externalDocs:
    description: "Find out more"
    url: "http://delilahres.com/"
- name: "user"
  description: "Contains the operations of the users"
  externalDocs:
    description: "Find out more"
    url: "http://delilahres.com/"
schemes:
- "https"
- "http"

paths:
  /products:
    get:
      tags:
        - "product"
      summary: "Finds all products"
      description: "Returns a object with all existing products"
      operationId: "getAllProducts"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Products"

    post:
      tags:
        - "product"
      summary: "Add a new product to the Database"
      operationId: "addProduct"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          name: "authorization"
          description: "Authorization Token"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Product added to the Database"
          required: true
          schema:
            $ref: "#/definitions/Products"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/createProducts"
        500:
          description: "Invald input. Error: ${error}"
      security:
        - store_auth:
            - "write:products"

  /products/{id}:
    delete:
        tags:
          - "product"
        summary: "Remove product"
        description: ""
        operationId: "deleteProduct"
        produces:
          - "application/json"
        parameters:
          - name: "id"
            in: "path"
            required: true
            type: "integer"
            format: "int64"
            description: "Enter productId of the product to delete"
          - name: "Token"
            in: "header"
            required: true
            type: "string"
            description: "Authorization Token, you need to be an administrator to do this process"
        responses:
          200:
            description: "Deleted product"
          500:
            description: "Invald input. Error: ${error}`"
        security:
          - store_auth:
              - "write:products"

    put:
      tags:
        - "product"
      summary: "Update an existing product"
      description: ""
      operationId: "updateProduct"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
          format: "int64"
          description: "Enter productId of the product to Update"
        - name: "Token"
          in: "header"
          required: true
          type: "string"
          description: "Authorization Token, you need to be an administrator to do this process"
        - name: "body"
          in: "body"
          description: "Product name and price are required"
          required: true
          schema:
            $ref: "#/definitions/ProductsUpdate"
      responses:
        204:
          description: "Updated product"
        500:
          description: "Invald input. Error: ${error}"
      security:
        - store_auth:
            - "write:products"

  
definitions:

  createProducts:
    type: "object"
    required:
      - "productName"
      - "productPrice"
    properties:
      message:
        type: "string"
        example: "Created"
  Products:
    type: "object"
    required:
      - "productName"
      - "productPrice"
    properties:
      productId:
        type: "integer"
        format: "int32"
        example: "1"
      productName:
        type: "string"
        example: "option1"
        
      productPrice:
        type: "integer"
        format: "int32"
        description: "Product Price"
        example: "2000"
  NewUsers:
      type: object
      properties:
        userName:
          type: "string"
          example: "FreddiMerc"
        fullName:
          type: "string"
          description: "Product Price"
          example: "Freddie Mercury"
        password:
          type: string
          example: "asc123"
        address:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
  ProductsUpdate:
    type: "object"
    required:
      - "productName"
      - "productPrice"
    properties:

      productName:
        type: "string"
        example: "Hamburger"
      productPrice:
        type: "integer"
        format: "int32"
        description: "Product Price"
        example: "200000"
  

securityDefinitions:
  store_auth:
    type: "oauth2"
    authorizationUrl: "localhost/v1/users/login"
    flow: "implicit"
    scopes:
      write:products: "New product, update product and delete product."
      write:orders: "modify orders status in the store"
      write:users: "list the registered users"

externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"